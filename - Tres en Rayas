#include <iostream> // libreria para entrada y salida  

using namespace std;

const int TAMANIO = 3; // se define el tamaño de la amtriz (3x3) 
char tablero[TAMANIO][TAMANIO]; // Matriz que representa el tañao de el tablero 

// Funcion para iniciar el tablero de juego con espacios vacios 
void inicializarTablero() {
    for (int i = 0; i < TAMANIO; ++i) { // se recorre las filas 
        for (int j = 0; j < TAMANIO; ++j) { se reorre las clumnas 
            tablero[i][j] = ' '; // y se inicia cada celda con un espacio vacio  
        }
    }
}

// Funcios para mostrar el tablero en la consola 
void mostrarTablero() {
    cout << "  0 1 2\n"; // encabezado de las cumlumnas
    for (int i = 0; i < TAMANIO; ++i) { // se recorre las filas 
        cout << i << " "; // encabezado de las filas 
        for (int j = 0; j < TAMANIO; ++j) { // se recorre las columnas 
            cout << tablero[i][j]; // se muestra el valor de cada celda vacia 
            if (j < TAMANIO - 1) cout << "|"; // aqui se muestra los separadores verticales 
        }
        cout << "\n"; // nueva linea despues de cada fila 
        if (i < TAMANIO - 1) cout << "  -----\n"; // se muestra los separadores horizontales 
    }
}

// Funcion para realisar movimientos en el tablero 
bool hacerMovimiento(int fila, int columna, char jugador) {
// Aqui se verifica si la pocision esta dentro de los limites y tambien que este vacia 
    if (fila >= 0 && fila < TAMANIO && columna >= 0 && columna < TAMANIO && tablero[fila][columna] == ' ') {
        tablero[fila][columna] = jugador; // colocamos simbolo de el jugador en la celda 
        return true; // se verifica si es verdadero 
    }
    return false; // se verifica si es falso 
}

// funcion para verificar si un jugador gana 
bool verificarVictoria(char jugador) { 
    // Verificamos filas y columnas 
    for (int i = 0; i < TAMANIO; ++i) {
        if (tablero[i][0] == jugador && tablero[i][1] == jugador && tablero[i][2] == jugador) return true; // verificamos filas 
        if (tablero[0][i] == jugador && tablero[1][i] == jugador && tablero[2][i] == jugador) return true; // verificamos columnas 
    }
    // verificamos diagonlaes 
    if (tablero[0][0] == jugador && tablero[1][1] == jugador && tablero[2][2] == jugador) return true; // diagonale principal 
    if (tablero[0][2] == jugador && tablero[1][1] == jugador && tablero[2][0] == jugador) return true; // diagonal secundaria 
    return false;
}

// funcion para verificar si el tablero esta lleno esto seria igual a un empate 
bool tableroLleno() { 
    for (int i = 0; i < TAMANIO; ++i) {
        for (int j = 0; j < TAMANIO; ++j) {
            if (tablero[i][j] == ' ') return false;
        }
    }
    return true;
}

int main() {
    inicializarTablero(); // iniciamos el tablero 
    char jugadorActual = 'X'; // comienza jugador x 
    bool victoria = false; // no hay victoria es falso  

    //Bucle princiál de el juego 
    while (!victoria && !tableroLleno()) { // mientras no tengamos victoria el tablero no esta lleno 
        mostrarTablero(); // Mostar el tablero 
        int fila, columna;
        if (jugadorActual == 'X') {
            cout << "Turno del Jugador 1 (X), ingresa fila y columna (ejemplo: 0 0): "; // Mensaje para el jugador numero 1 
        } else {
            cout << "Turno del Jugador 2 (O), ingresa fila y columna (ejemplo: 0 0): "; // Mensaje para el jugador numero 2 
        }
        cin >> fila >> columna; // leemos filas y columnas 

        if (hacerMovimiento(fila, columna, jugadorActual)) { // nuevo movimiento 
            victoria = verificarVictoria(jugadorActual);     // se verifica si el jugador actual ha ganado 
            if (!victoria) {
                jugadorActual = (jugadorActual == 'X') ? 'O' : 'X'; // cambiamos al otro jugador 
            }
        } else {
            cout << "Movimiento inválido. Inténtalo de nuevo.\n"; // mensaje de error si el movimeito es invalido 
        }
    }

    mostrarTablero(); // mostramos el tablero final  

    if (victoria) { // verificamos si hay victoria 
        if (jugadorActual == 'X') {
            cout << "¡Jugador 1 (X) gana!\n"; // mensaje de victoria para jugador numero 1
        } else {
            cout << "¡Jugador 2 (O) gana!\n"; // mensaje de victoria para el juagador numero 2 
        }
    } else {
        cout << "Es un empate.\n"; // mensaje si es un empate 
    }

    return 0; // y el fin de el progrma 
}

